(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{457:function(e,t,i){"use strict";i.r(t);var r=i(0),o=Object(r.a)({},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),i("p",[e._v("For instance, the vertices of the graph may represent tasks to\nbe performed, and the edges may represent constraints that one\ntask must be performed before another; in this application, a\ntopological ordering is just a valid sequence for the tasks.")]),e._v(" "),i("p",[e._v("A topological ordering is possible if and only if the graph has\nno directed cycles, that is, if it is a "),i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Directed_acyclic_graph",target:"_blank",rel:"noopener noreferrer"}},[e._v("directed acyclic graph"),i("OutboundLink")],1),e._v("\n(DAG). Any DAG has at least one topological ordering, and algorithms are\nknown for constructing a topological ordering of any DAG in linear time.")]),e._v(" "),e._m(2),e._v(" "),i("p",[e._v("A topological ordering of a directed acyclic graph: every edge goes from\nearlier in the ordering (upper left) to later in the ordering (lower right).\nA directed graph is acyclic if and only if it has a topological ordering.")]),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),i("p",[e._v("The graph shown above has many valid topological sorts, including:")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Topological_sorting",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wikipedia"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://www.youtube.com/watch?v=ddTC4Zovtbc&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"}},[e._v("Topological Sorting on YouTube by Tushar Roy"),i("OutboundLink")],1)])])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"topological-sorting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#topological-sorting","aria-hidden":"true"}},[this._v("#")]),this._v(" Topological Sorting")])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("p",[e._v("In the field of computer science, a topological sort or\ntopological ordering of a directed graph is a linear ordering\nof its vertices such that for every directed edge "),i("code",[e._v("uv")]),e._v(" from\nvertex "),i("code",[e._v("u")]),e._v(" to vertex "),i("code",[e._v("v")]),e._v(", "),i("code",[e._v("u")]),e._v(" comes before "),i("code",[e._v("v")]),e._v(" in the ordering.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/c/c6/Topological_Ordering.svg",alt:"Directed Acyclic Graph"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[this._v("#")]),this._v(" Example")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/0/03/Directed_acyclic_graph_2.svg",alt:"Topologic Sorting"}})])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ul",[i("li",[i("code",[e._v("5, 7, 3, 11, 8, 2, 9, 10")]),e._v(" (visual left-to-right, top-to-bottom)")]),e._v(" "),i("li",[i("code",[e._v("3, 5, 7, 8, 11, 2, 9, 10")]),e._v(" (smallest-numbered available vertex first)")]),e._v(" "),i("li",[i("code",[e._v("5, 7, 3, 8, 11, 10, 9, 2")]),e._v(" (fewest edges first)")]),e._v(" "),i("li",[i("code",[e._v("7, 5, 11, 3, 10, 8, 9, 2")]),e._v(" (largest-numbered available vertex first)")]),e._v(" "),i("li",[i("code",[e._v("5, 7, 11, 2, 3, 8, 9, 10")]),e._v(" (attempting top-to-bottom, left-to-right)")]),e._v(" "),i("li",[i("code",[e._v("3, 7, 8, 5, 11, 10, 2, 9")]),e._v(" (arbitrary)")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#application","aria-hidden":"true"}},[this._v("#")]),this._v(" Application")])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("p",[e._v("The canonical application of topological sorting is in\n"),i("strong",[e._v("scheduling a sequence of jobs")]),e._v(" or tasks based on their dependencies. The jobs\nare represented by vertices, and there is an edge from "),i("code",[e._v("x")]),e._v(" to "),i("code",[e._v("y")]),e._v(" if\njob "),i("code",[e._v("x")]),e._v(" must be completed before job "),i("code",[e._v("y")]),e._v(" can be started (for\nexample, when washing clothes, the washing machine must finish\nbefore we put the clothes in the dryer). Then, a topological sort\ngives an order in which to perform the jobs.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Other application is "),t("strong",[this._v("dependency resolution")]),this._v(". Each vertex is a package\nand each edge is a dependency of package "),t("code",[this._v("a")]),this._v(" on package 'b'. Then topological\nsorting will provide a sequence of installing dependencies in a way that every\nnext dependency has its dependent packages to be installed in prior.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[this._v("#")]),this._v(" References")])}],!1,null,null,null);o.options.__file="README.md";t.default=o.exports}}]);