(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{333:function(e,t,r){"use strict";r.r(t);var n=r(0),a=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),r("p",[r("strong",[e._v("Context: "),r("router-link",{attrs:{to:"/"}},[e._v("frontend-dev-bookmarks")]),e._v(" / Architecture")],1)]),r("p",[e._v("Functional programming is a programming paradigm, that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.")]),r("p",[r("a",{attrs:{href:"http://frontend.directory/",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://img.shields.io/badge/frontend-directory-blue.svg?style=flat-square",alt:"frontend.directory"}}),r("OutboundLink")],1),r("a",{attrs:{href:"https://gitter.im/dypsilon/frontend-dev-bookmarks",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://img.shields.io/gitter/room/dypsilon/frontend-dev-bookmarks.svg?style=flat-square&maxAge=2592000",alt:"Gitter"}}),r("OutboundLink")],1),r("a",{attrs:{href:"https://twitter.com/FrontendDir",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://img.shields.io/badge/follow-twitter-55acee.svg?style=flat-square",alt:"Twitter"}}),r("OutboundLink")],1)]),r("hr"),r("ul",[r("li",[r("strong",[e._v("A Gentle Introduction to Functional JavaScript")]),e._v(": A 3 part series, by Derick Bailey featuring Chet Harrison, about functional programming with many examples in JavaScript.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=ZQSU4geXAxM",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monads, Monoids and Composition with Functional JavaScript"),r("OutboundLink")],1)]),e._v(": Chet Harrison explains monads using form validation as an example.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/ChetHarrison/A-Gentle-Introduction-to-Functional-JavaScript",target:"_blank",rel:"noopener noreferrer"}},[e._v("Notes and Code from the Crowdcast"),r("OutboundLink")],1)]),e._v(": Chet Harrison provides a broad overview of functional programming concepts and a step by step tutorial for building Monads.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=myISHtMMeyU",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Basics of Functional Programming"),r("OutboundLink")],1)]),e._v(": In this first episode, you'll learn the basics of why functional programming, what it is, where it came from and what the core of it is. You'll see function composition, function purity, currying, higher order functions and first-class functions.")])])]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=JZSoPZUoR58",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Million Ways to Fold in JS"),r("OutboundLink")],1)]),e._v(": Brian Lonsdorf provides many functional alternatives to loops in this video.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://vimeo.com/45140590",target:"_blank",rel:"noopener noreferrer"}},[e._v("Adventures in Functional Programming"),r("OutboundLink")],1)]),e._v(": A talk by Jim Weirich, demonstrating how to use functional programming and lambda calculus to derive Y combinator.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://allong.es/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Allong.es"),r("OutboundLink")],1)]),e._v(": "),r("a",{attrs:{href:"http://allong.es",target:"_blank",rel:"noopener noreferrer"}},[e._v("allong.es"),r("OutboundLink")],1),e._v(" is a JavaScript library based on the function combinator and decorator recipes introduced in the book JavaScript Allong√©.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/cullophid/barely-functional",target:"_blank",rel:"noopener noreferrer"}},[e._v("Barely Functional"),r("OutboundLink")],1)]),e._v(": Tiny (2.7kb) functional programming library using native es5/6 operations.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://blog.gypsydave5.com/2015/03/21/lazy-eval-and-memo/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Basic Lazy Evaluation and Memoization in JavaScript"),r("OutboundLink")],1)]),e._v(": Memoization is a way of optimizing code so that it will return cached results for the same inputs.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://bilby.brianmckenna.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bilby.js"),r("OutboundLink")],1)]),e._v(": A functional library based on category theory with immutable multimethods, functional data structures, functional operator overloading, automated specification testing.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@homam/composability-from-callbacks-to-categories-in-es6-f3d91e62451e",target:"_blank",rel:"noopener noreferrer"}},[e._v("Composability: from Callbacks to Categories in ES6"),r("OutboundLink")],1)]),e._v(": The author borrows some ideas from functional languages to explore a different approach for addressing the callback hell.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8",target:"_blank",rel:"noopener noreferrer"}},[e._v("Curry or Partial Application?"),r("OutboundLink")],1)]),e._v(": Eric Elliott describes the difference between partial application and curry.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/puffnfresh/daggy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Daggy"),r("OutboundLink")],1)]),e._v(": Library for creating tagged constructors with catamorphism.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/cullophid/date-fp",target:"_blank",rel:"noopener noreferrer"}},[e._v("Date FP"),r("OutboundLink")],1)]),e._v(": Functional programming date manipulation library.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@drboolean/debugging-functional-7deb4688a08c",target:"_blank",rel:"noopener noreferrer"}},[e._v("Debugging Functional"),r("OutboundLink")],1)]),e._v(": This post will demonstrate a simple solution that can go a long way to enhance the debugging experience in functional JavaScript applications.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://deterministic.curated.co/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deterministic"),r("OutboundLink")],1)]),e._v(": A weekly digest of interesting news and articles covering functional programming for the web, especially on the front end.")]),r("li",[r("strong",[e._v("Example Projects")]),e._v(": Open source projects which use functional programming, preferably point-free and side-effect-free.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/plaid/async-problem",target:"_blank",rel:"noopener noreferrer"}},[e._v("Async Problem"),r("OutboundLink")],1)]),e._v(": This project considers various approaches to the problem of concurrently reading files inside a directory and concatenating their contents.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/iamstarkov/es-deps-deep",target:"_blank",rel:"noopener noreferrer"}},[e._v("CommonJS module dependencies resolver"),r("OutboundLink")],1)]),e._v(": The module and all related modules are written using point-free style.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/Bradcomp/egghunt-server/tree/functional",target:"_blank",rel:"noopener noreferrer"}},[e._v("Egg Hunt Server"),r("OutboundLink")],1)]),e._v(": A restful API written in FP style.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/Avaq/Idealist",target:"_blank",rel:"noopener noreferrer"}},[e._v("Idealist"),r("OutboundLink")],1)]),e._v(": Functional HTTP micro-framework.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/sanctuary-js/sanctuary-site/blob/gh-pages/scripts/generate",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sanctuary Build Script"),r("OutboundLink")],1)]),e._v(": A build script for generating the Sanctuary website.")])])]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/fp-dom/fp-dom",target:"_blank",rel:"noopener noreferrer"}},[e._v("FP DOM"),r("OutboundLink")],1)]),e._v(": A collection of functions to favor functional programming in a DOM context.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/fantasyland/fantasy-combinators",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fantasy Combinators"),r("OutboundLink")],1)]),e._v(": Combinators which are used for fantasy-land projects.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/fantasyland/fantasy-land",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fantasy Land"),r("OutboundLink")],1)]),e._v(": Specification for interoperability of common algebraic structures in JavaScript.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/fantasyland/fantasy-land/blob/master/implementations.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Conformant Implementations"),r("OutboundLink")],1)]),e._v(": A list of libraries implementing the Fantasy Land specification.")])])]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/fantasyland/fantasy-lenses",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fantasy Lenses"),r("OutboundLink")],1)]),e._v(": Composable, immutable getters and setters.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://blog.simpleblend.net/functional-javascript-concepts-currying/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Concepts For JavaScript Developers: Currying"),r("OutboundLink")],1)]),e._v(": Andrew Robbins talks about what currying is and why it's useful.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://www.mokacoding.com/blog/functional-core-reactive-shell/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Core Reactive Shell"),r("OutboundLink")],1)]),e._v(": Giovanni Lodi makes an overview of different architecture meta-patterns and describes his current findings about functional programming and observables as a way to control side effects.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/paldepind/functional-frontend-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Frontend Architecture"),r("OutboundLink")],1)]),e._v(': This repository is meant to document and explore the implementation of what is known as "the Elm architecture". A simple functional architecture for building frontend applications.')]),r("li",[r("strong",[r("a",{attrs:{href:"https://jcouyang.gitbooks.io/functional-javascript/content/en/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional JavaScript Mini Book"),r("OutboundLink")],1)]),e._v(": Jichao Ouyang gives and introduction to functional programming with JavaScript and describes some Typeclasses like Functor and Monad.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/timoxley/functional-javascript-workshop",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Javascript Workshop"),r("OutboundLink")],1)]),e._v(": The goal of this workshop is to create realistic problems that can be solved using terse, vanilla, idiomatic JavaScript.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=1uRC3hmKQnM",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Principles In React"),r("OutboundLink")],1)]),e._v(": Jessica Kerr talks about four functional principles: Composition, Declarative Style, Isolation and Flow Of Data, and their usage in React.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/hemanth/functional-programming-jargon",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Programming Jargon"),r("OutboundLink")],1)]),e._v(": Jargon from the functional programming world in simple terms.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Programming for JavaScript People"),r("OutboundLink")],1)]),e._v(": Chet Corcos explains different features of functional programming like composition, currying, lazy evaluation, referential transparency and compares Clojure with Haskell.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://victorsavkin.com/post/63551894251/functional-refactoring-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional Refactoring in JavaScript"),r("OutboundLink")],1)]),e._v(": In this article Victor Savkin shows how to apply functional thinking when refactoring JavaScript code. He does that by taking a simple function and transforming it into a more extendable one, which has no mutable state, and no if statements.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://functionaljs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functional.js"),r("OutboundLink")],1)]),e._v(": Functional.js is a functional JavaScript library. It facilitates currying and point-free / tacit programming and this methodology has been adhered to from the ground up.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/paldepind/functionize",target:"_blank",rel:"noopener noreferrer"}},[e._v("Functionize"),r("OutboundLink")],1)]),e._v(": A collection of functions which aids in making non-functional libraries functional.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@yelouafi/futures-and-monoids-7e9f4574bd88",target:"_blank",rel:"noopener noreferrer"}},[e._v("Futures and Monoids"),r("OutboundLink")],1)]),e._v(": Yassine Elouafi explains the nature of Monoids using Futures, Numbers and Strings as examples.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://functionaltalks.org/2013/05/27/brian-lonsdorf-hey-underscore-youre-doing-it-wrong/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hey Underscore, You're Doing It Wrong!"),r("OutboundLink")],1)]),e._v(": In this talk Brian Lonsdorf gently takes a shot at underscore.js for not thinking about currying and partial function application in its library design.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=mS264h8KGwk",target:"_blank",rel:"noopener noreferrer"}},[e._v("Immutability, Interactivity & JavaScript"),r("OutboundLink")],1)]),e._v(": We'll dive in and see how trees of JavaScript arrays can permit building efficient immutable collections. Then we'll see how embracing immutable values dramatically simplifies some classic hard problems in client side programming including but not limited to undo, error playback, and online/offline synchronization.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/qiao/immutable-sequence.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("Immutable Sequence.js"),r("OutboundLink")],1)]),e._v(": High performance implementation of Immutable Sequence in JavaScript, based on Finger Tree.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/facebook/immutable-js/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Immutable.js"),r("OutboundLink")],1)]),e._v(": Immutable persistent data collections for Javascript which increase efficiency and simplicity.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://javascriptair.com/episodes/2015-12-30/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSAir - Functional and Immutable Design Patterns in JavaScript"),r("OutboundLink")],1)]),e._v(': An episode of JavaScript Air about "the how and why of functional programming and immutable design patterns in JavaScript" with Dab Abramov and Brian Lonsdorf as guests.')]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@yelouafi/javascript-and-type-thinking-735edddc388d",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript and Type Thinking"),r("OutboundLink")],1)]),e._v(": Yassine Elouafi introduces Algebraic Data Types with an example of a simple and a recursive type.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://vimeo.com/97408202",target:"_blank",rel:"noopener noreferrer"}},[e._v("Javascript Combinators by Reginald Braithwaite"),r("OutboundLink")],1)]),e._v(": In this talk, we'll explore functions that consume and return functions, and see how they can be used to build expressive programs that hew closely to JavaScript's natural style.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/loop-recur/lambdajs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lamda.js"),r("OutboundLink")],1)]),e._v(": This library takes all the methods on instances of strings, arrays, objects, numbers, and regexp's and turns them into functions that can be used in a pointfree way.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://vimeo.com/104807358",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lenses Quick n‚Äô Dirty"),r("OutboundLink")],1)]),e._v(": A video by Brian Lonsdorf that introduces lenses.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://joneshf.github.io/programming/2015/12/19/Lenses-and-Virtual-DOM-Support-Open-Closed.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lenses and Virtual DOM Support Open Closed"),r("OutboundLink")],1)]),e._v(": Hardy Jones explains how Lenses work using a simple example of working with Virtual DOM.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/DrBoolean/lenses",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lenses.js"),r("OutboundLink")],1)]),e._v(": Composable kmett style lenses.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/lodash/lodash/wiki/FP-Guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lodash/fp"),r("OutboundLink")],1)]),e._v(": The lodash/fp module is an instance of lodash with its methods wrapped to produce immutable auto-curried iteratee-first data-last methods.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://alistapart.com/article/making-your-javascript-pure",target:"_blank",rel:"noopener noreferrer"}},[e._v("Making your JavaScript Pure"),r("OutboundLink")],1)]),e._v(": Jack Franklin compares pure and impure functions and describes how to leverage functional programming principles in JavaScript.")]),r("li",[r("strong",[e._v("Monads")]),e._v(": Composable computation descriptions. The essence of monad is thus separation of composition timeline from the composed computation's execution timeline, as well as the ability of computation to implicitly carry extra data.\n"),r("ul",[r("li",[r("strong",[e._v("Collections of Monads")]),e._v(": Libraries of monad implementations.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"http://akh-js.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Akh"),r("OutboundLink")],1)]),e._v(": Akh includes a basic set of common monad transformers, along with monads derived from these transformers. Akh structures implement the Fantasy Land specification.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://folktale.origamitower.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Folktale"),r("OutboundLink")],1)]),e._v(": Folktale is a suite of libraries for generic functional programming in JavaScript that allows you to write elegant modular applications with fewer bugs, and more reuse.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/cwmyers/monet.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monet.js"),r("OutboundLink")],1)]),e._v(": Monet is a tool bag that assists Functional Programming by providing a rich set of Monads and other useful functions.")])])]),r("li",[r("strong",[e._v("Continuation Monad")]),e._v(": Represents computations in continuation-passing style (CPS). In continuation-passing style function result is not returned, but instead is passed to another function, received as a parameter (continuation).\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"http://blog.mattbierner.com/the-delimited-continuation-monad-in-javascript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Delimited Continuation Monad in Javascript"),r("OutboundLink")],1)]),e._v(": This post overviews continuations in Atum and covers the implementation of the delimited continuation monad in JavaScript.")])])]),r("li",[r("strong",[e._v("Either Monad")]),e._v(": The Either type represents values with two possibilities: a value of type Either a b is either Left a or Right b. It is often used for error handling.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://www.npmjs.com/package/lazy-either",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lazy Either"),r("OutboundLink")],1)]),e._v(": The LazyEither type is used to represent a lazy Either value. It is similar to the Future and Promise types.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://tech.evojam.com/2016/03/21/practical-intro-to-monads-in-javascript-either/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Practical Intro to Monads in JavaScript: Either"),r("OutboundLink")],1)]),e._v(": Jakub Strojewski describes the Either Monad, a tool for fast-failing, synchronous computation chains.")])])]),r("li",[r("strong",[e._v("Free Monad")]),e._v(": A free monad satisfies all the Monad laws, but does not do any computation. It just builds up a nested series of contexts. The user who creates such a free monadic value is responsible for doing something with those nested contexts.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/fantasyland/fantasy-frees",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fantasy Frees"),r("OutboundLink")],1)]),e._v(": An implementation of Coyoneda, Yoneda, Trampoline, Free Monad and Free Applicative with usage examples.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/joneshf/abstractions/tree/master/src",target:"_blank",rel:"noopener noreferrer"}},[e._v("Free Monad Experiments by Hardy Jones"),r("OutboundLink")],1)]),e._v(": Coyoneda, Coproduct, Either, Free, State, AJAX and so on.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=WH5BrkzGgQY&list=PLK_hdtAJ4KqUWp5LJdLOgkD_8qKW0iAHi&index=1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Free Monads Video Series"),r("OutboundLink")],1)]),e._v(": A video series on free monads by Brian Lonsdorf explaining Coyoneda, Free Monad and Interpretors.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/DrBoolean/freeky",target:"_blank",rel:"noopener noreferrer"}},[e._v("Freeky"),r("OutboundLink")],1)]),e._v(": Collection of free monads by Brian Lonsdorf.")])])]),r("li",[r("strong",[e._v("Futures")]),e._v(": Futures represent the value arising from the success or failure of an asynchronous operation (I/O).\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/Avaq/Fluture",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fluture"),r("OutboundLink")],1)]),e._v(": The debuggable Fantasy Land Future library.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://folktale.origamitower.com/api/v2.1.0/en/folktale.concurrency.task.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Folktale Task"),r("OutboundLink")],1)]),e._v(": A structure for time-dependent values, providing explicit effects for delayed computations, latency, etc.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@yelouafi/from-callback-to-future-functor-monad-6c86d9c16cb5",target:"_blank",rel:"noopener noreferrer"}},[e._v("From Callback to Future -> Functor -> Monad"),r("OutboundLink")],1)]),e._v(": Yassine Elouafi goes through a simple implementation of Futures and compares them to Promises.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/futurize/future-io",target:"_blank",rel:"noopener noreferrer"}},[e._v("Future IO"),r("OutboundLink")],1)]),e._v(": A fantasy-land compliant monadic IO library for Node.js.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/arcseldon/futurizer",target:"_blank",rel:"noopener noreferrer"}},[e._v("Futurizer"),r("OutboundLink")],1)]),e._v(": Turn callback-style functions or promises into futures!")])])]),r("li",[r("strong",[e._v("Introduction")]),e._v(": Introductory materials about monads.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://curiosity-driven.org/monads-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monads in JavaScript"),r("OutboundLink")],1)]),e._v(": This article explains monads and their usage in JavaScript including Identity, Maybe, List, Continuation, Do notation and Chaining.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://tech.evojam.com/2016/02/22/practical-intro-to-monads-in-javascript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Practical Intro to Monads in JavaScript"),r("OutboundLink")],1)]),e._v(": A simple, practical tutorial for JavaScript developers showing how some monads can be used.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://igstan.ro/posts/2011-05-02-understanding-monads-with-javascript.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding Monads With JavaScript"),r("OutboundLink")],1)]),e._v(": The author starts with a problem of dealing with explicit immutable state and solves it with JavaScript using monads.")])])]),r("li",[r("strong",[e._v("Maybe Monad")]),e._v(": Using Maybe is a good way to deal with errors or exceptional cases without resorting to drastic measures such as error. It is a simple kind of error monad, where all errors are represented by Nothing. A richer error monad can be built using the Either type.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"http://sean.voisen.org/blog/2013/10/intro-monads-maybe/",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Gentle Intro to Monads ‚Ä¶ Maybe?"),r("OutboundLink")],1)]),e._v(": A short introduction to Maybe and the world of monads.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://robotlolita.me/2013/12/08/a-monad-in-practicality-first-class-failures.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Monad in Practicality: First-Class Failures"),r("OutboundLink")],1)]),e._v(": This article shows how the Maybe monad can be used for handling simple failure use cases. It then extrapolates into complex failure scenarios and shows how these cases can be modelled in terms of the Either monad.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://tech.evojam.com/2016/02/22/practical-intro-to-monads-in-javascript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Practical Intro to Monads in JavaScript"),r("OutboundLink")],1)]),e._v(": A simple, practical tutorial for JavaScript developers showing how some monads can be used.")])])]),r("li",[r("strong",[e._v("Reader Monad")]),e._v(": Represents a computation, which can read values from a shared environment, pass values from function to function, and execute sub-computations in a modified environment.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://passy.svbtle.com/dont-fear-the-reader",target:"_blank",rel:"noopener noreferrer"}},[e._v("Don‚Äôt Fear the Reader"),r("OutboundLink")],1)]),e._v(": Pascal Hartig explains how to use the reader monad in JavaScript.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/fantasyland/fantasy-readers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fantasy Readers"),r("OutboundLink")],1)]),e._v(": Fantasy Land compatible implementation of the Reader Monad.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.livecoding.tv/evilsoft/videos/WojoB-functional-js-reader-monad",target:"_blank",rel:"noopener noreferrer"}},[e._v("LiveCoding Video of Reader Monad Implementation"),r("OutboundLink")],1)]),e._v(": In this video you will learn how to use and implement a Reader from scratch.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://vimeo.com/105300347",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monad a Day: Reader"),r("OutboundLink")],1)]),e._v(": Short video by Brian Lonsdorf about the Reader Monad.")])])]),r("li",[r("strong",[e._v("Transformers")]),e._v(": Special types that allow us to roll two monads into a single one that shares the behavior of both.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"http://akh-js.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Akh"),r("OutboundLink")],1)]),e._v(": Akh includes a basic set of common monad transformers, along with monads derived from these transformers. Akh structures implement the Fantasy Land specification.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/quarterto-archive/fantasy-arrayt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fantasy ArrayT"),r("OutboundLink")],1)]),e._v(": Monad transformer for JavaScript Arrays.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/boris-marinov/monad-transformers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monad Transformers"),r("OutboundLink")],1)]),e._v(": Monad transformers are tricky, they require an excessive amount of type juggling. One of the aims of this package is to reduce the amount of wrapping and unwrapping needed for making a new transformer and to provide an easy way to define and combine transformers.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/boris-marinov/monad-transformers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monad Transformers Library"),r("OutboundLink")],1)]),e._v(": Practical monad transformers for JS.")])])]),r("li",[r("strong",[e._v("Validation Monad")]),e._v(": A disjunction that is appropriate for validating inputs and aggregating failures.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"http://folktale.origamitower.com/api/v2.1.0/en/folktale.validation.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Folktale Validation"),r("OutboundLink")],1)]),e._v(": Validation Monad implementation of Folktale Library.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://tech.evojam.com/2016/04/26/practical-intro-to-monads-in-javascript-validation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Practical Intro to Monads in JavaScript: Validation"),r("OutboundLink")],1)]),e._v(": Jakub Strojewski shows how to accumulate errors in a simple Validation use case.")])])])])]),r("li",[r("strong",[r("a",{attrs:{href:"http://swannodette.github.io/mori/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mori"),r("OutboundLink")],1)]),e._v(": A library for using ClojureScript's persistent data structures and supporting API from the comfort of vanilla JavaScript.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://drboolean.gitbooks.io/mostly-adequate-guide/content/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mostly Adequate Guide to Functional Programming"),r("OutboundLink")],1)]),e._v(": A book by Brian Lonsdorf that introduces algebraic functional programming in JavaScript.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://kovach.me/nanoscope/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nanoscope"),r("OutboundLink")],1)]),e._v(": Nanoscope is a javascript library designed to make complex transformations of data much easier. It is a built on the idea of a functional Lens - a construct that enables focusing on sub-parts of data structures to get and modify.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.npmjs.com/package/pointfree-fantasy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pointfree Fantasy"),r("OutboundLink")],1)]),e._v(": Point-free wrappers for fantasy-land. Functions are curried using lodash's curry function, and receive their data last. Gives us aliases with our familar haskell names as well.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://lucasmreis.github.io/blog/pointfree-javascript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pointfree Javascript"),r("OutboundLink")],1)]),e._v(": In this post Lucas Reis presents what is called pointfree style programming and goes through some common scenarios to demonstrate its benefits.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=XcS-LdEBUkE",target:"_blank",rel:"noopener noreferrer"}},[e._v("Practical Functional Programming: Pick Two"),r("OutboundLink")],1)]),e._v(": James Coglan tries to show in this video how to use functional concepts in daily JavaScript programming.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@yelouafi/promises-fp-beautiful-streams-6f0235c5b179",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promises + FP = Beautiful Streams"),r("OutboundLink")],1)]),e._v(": Yassine Elouafi show how to use functional programming and algebraic data types to derive a pure functional definition of reactive programming like streams.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://vimeo.com/49384334",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pure JavaScript"),r("OutboundLink")],1)]),e._v(": Christian Johansen shows you how you can up your game by leaving loops behind and embracing functions as the primary unit of abstraction.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://rauchg.com/2015/pure-ui/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pure UI"),r("OutboundLink")],1)]),e._v(": Guillermo Rauch discusses the definition of an application‚Äôs UI as a pure function of application state.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://www.purescript.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PureScript"),r("OutboundLink")],1)]),e._v(": PureScript is a strongly, statically typed language which compiles to JavaScript. It is written in and inspired by Haskell.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://ramdajs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ramda"),r("OutboundLink")],1)]),e._v(": A practical library designed specifically for a functional programming style, one that makes it easy to create functional pipelines, one that never mutates user data.\n"),e._m(1)]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/ramda/ramda-fantasy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ramda Fantasy"),r("OutboundLink")],1)]),e._v(": Fantasy Land compatible types for easy integration with Ramda. This is an experimental project and will probably merge with Sanctuary.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://sanctuary.js.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sanctuary"),r("OutboundLink")],1)]),e._v(": Sanctuary is a functional programming library inspired by Haskell and PureScript. It depends on and works nicely with Ramda. Sanctuary makes it possible to write safe code without null checks.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/sanctuary-js/sanctuary-site/blob/gh-pages/scripts/generate",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sanctuary Build Script"),r("OutboundLink")],1)]),e._v(": A build script for generating the Sanctuary website.")])])]),r("li",[r("strong",[r("a",{attrs:{href:"http://jaysoo.ca/2016/01/13/functional-programming-little-ideas/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Little Idea of Functional Programming"),r("OutboundLink")],1)]),e._v(": Jack Hsu tries to take a look at a couple of simple concepts that make up the little idea behind functional programming and to tie the concepts back to code examples in JavaScript.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://guigrpa.github.io/timm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Timm"),r("OutboundLink")],1)]),e._v(": Immutability helpers with fast reads and acceptable writes.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers"),r("OutboundLink")],1)]),e._v(": Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=6mTbuzafcII",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Transducers" Presentation at Strange Loop'),r("OutboundLink")],1)]),e._v(": This talk will describe transducers, a new library feature for Clojure (but of interest to other languages) that emphasizes composable, context-free, intermediate-free notions like 'mapping' and 'filtering' and their concrete reuse across all of the contexts above.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://gfxmonk.net/2015/11/25/figuring-out-what-transducers-are-good-for.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Figuring out what transducers are good for"),r("OutboundLink")],1)]),e._v(": Tim Cuthbertson attempts some plausible but detailed examples with Transducers in JavaScript.")]),r("li",[r("strong",[e._v("Implementations")]),e._v(": Libraries that implement Transducer protocoll and include ready to use transformers.\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/transduce/transduce",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transduce"),r("OutboundLink")],1)]),e._v(": Implementation by Kevin Beaty extracted from underarm.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/cognitect-labs/transducers-js",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers-js by Cognitect Labs"),r("OutboundLink")],1)]),e._v(": A high performance Transducers implementation for JavaScript by Cognitect Labs.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/jlongster/transducers.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers.js Library by James Long"),r("OutboundLink")],1)]),e._v(": A small library for generalized transformation of data (inspired by Clojure's transducers)\n"),r("ul",[r("li",[r("strong",[r("a",{attrs:{href:"http://jlongster.com/Transducers.js-Round-2-with-Benchmarks",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers.js Round 2 with Benchmarks"),r("OutboundLink")],1)]),e._v(": Refactored version of Transducers.js, some benchmarks, Laziness, the transformer protocoll.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://jlongster.com/Transducers.js--A-JavaScript-Library-for-Transformation-of-Data",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers.js: A JavaScript Library for Transformation of Data"),r("OutboundLink")],1)]),e._v(": A post announcing the transducers.js library with some explanation.")])])])])]),r("li",[r("strong",[r("a",{attrs:{href:"http://simplectic.com/blog/2015/ramda-transducers-logs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Streaming Logs with Transducers and Ramda"),r("OutboundLink")],1)]),e._v(": In this article we will use Ramda to parse a log file without curly braces (and introduce transducers along the way).")]),r("li",[r("strong",[r("a",{attrs:{href:"http://clojure.org/reference/transducers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers Documentation for Clojure"),r("OutboundLink")],1)]),e._v(": Transducers are composable algorithmic transformations. They are independent from the context of their input and output sources and specify only the essence of the transformation in terms of an individual element.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://simplectic.com/blog/2014/transducers-explained-1/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers Explained: Part 1"),r("OutboundLink")],1)]),e._v(": An introduction to transducers using JavaScript. We will work from reducing over arrays, to defining transformations as transformers, then incrementally introducing transducers and using them with transduce.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://simplectic.com/blog/2014/transducers-explained-pipelines/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers Explained: Pipelines"),r("OutboundLink")],1)]),e._v(": In this article, we will introduce four new transducers: filter, remove, drop and take. We will show how transducers can be composed into pipelines and talk about the order of transformation.")]),r("li",[r("strong",[r("a",{attrs:{href:"http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers are Coming"),r("OutboundLink")],1)]),e._v(": The first announcement by Rich Hickey.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://xgrommx.github.io/rx-book/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/transducers.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transducers with Observable Sequences"),r("OutboundLink")],1)]),e._v(": A chapter from the RxJS Book describing Transducers.")]),r("li",[r("strong",[r("a",{attrs:{href:"https://medium.com/@roman01la/understanding-transducers-in-javascript-3500d3bd9624#.3lbq6d4yq",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding Transducers in JavaScript"),r("OutboundLink")],1)]),e._v(": Roman Liutikov translated code examples from similar Clojure article into JavaScript. So you can still read the article and check code examples here.")])])]),r("li",[r("strong",[r("a",{attrs:{href:"https://github.com/paldepind/union-type",target:"_blank",rel:"noopener noreferrer"}},[e._v("Union Type"),r("OutboundLink")],1)]),e._v(": Union types are a way to group different values together. Union-type is a small JavaScript library for defining and using union types.")])]),r("hr"),e._m(2),e._m(3),r("p",[e._v("Please provide a link back to this repository. This is not necessary for GitHub forks.")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"functional-programming"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functional-programming","aria-hidden":"true"}},[this._v("#")]),this._v(" Functional Programming")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("strong",[this._v("Practical Ramda - Functional Programming Examples")]),this._v(": Tom MacWright gives some practical examples of Ramda usage.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"license"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#license","aria-hidden":"true"}},[this._v("#")]),this._v(" License")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("a",{attrs:{rel:"license",href:"http://creativecommons.org/licenses/by/4.0/"}},[t("img",{staticStyle:{"border-width":"0"},attrs:{alt:"Creative Commons License",src:"https://i.creativecommons.org/l/by/4.0/88x31.png"}})]),t("br"),this._v("This work is licensed under a "),t("a",{attrs:{rel:"license",href:"http://creativecommons.org/licenses/by/4.0/"}},[this._v("Creative Commons Attribution 4.0 International License")]),this._v(".")])}],!1,null,null,null);t.default=a.exports}}]);