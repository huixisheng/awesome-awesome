(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{448:function(t,e,r){"use strict";r.r(e);var n=r(0),i=Object(n.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("p",[t._v("Dijkstra's algorithm is an algorithm for finding the shortest\npaths between nodes in a graph, which may represent, for example,\nroad networks.")]),t._v(" "),r("p",[t._v('The algorithm exists in many variants; Dijkstra\'s original variant\nfound the shortest path between two nodes, but a more common\nvariant fixes a single node as the "source" node and finds\nshortest paths from the source to all other nodes in the graph,\nproducing a shortest-path tree.')]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=gdmfOwyQlcI&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"}},[t._v("On YouTube by Nathaniel Fan"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=lAXZGERcDf4&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"}},[t._v("On YouTube by Tushar Roy"),r("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"dijkstra-s-algorithm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-s-algorithm","aria-hidden":"true"}},[this._v("#")]),this._v(" Dijkstra's Algorithm")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif",alt:"Dijkstra"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Dijkstra's algorithm to find the shortest path between "),e("code",[this._v("a")]),this._v(" and "),e("code",[this._v("b")]),this._v(".\nIt picks the unvisited vertex with the lowest distance,\ncalculates the distance through it to each unvisited neighbor,\nand updates the neighbor's distance if smaller. Mark visited\n(set to red) when done with neighbors.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[this._v("#")]),this._v(" References")])}],!1,null,null,null);i.options.__file="README.md";e.default=i.exports}}]);