(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{376:function(e,t,r){"use strict";r.r(t);var a=r(0),n=Object(a.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),r("p",[e._v("A red–black tree is a kind of self-balancing binary search\ntree in computer science. Each node of the binary tree has\nan extra bit, and that bit is often interpreted as the\ncolor (red or black) of the node. These color bits are used\nto ensure the tree remains approximately balanced during\ninsertions and deletions.")]),r("p",[e._v("Balance is preserved by painting each node of the tree with\none of two colors in a way that satisfies certain properties,\nwhich collectively constrain how unbalanced the tree can\nbecome in the worst case. When the tree is modified, the\nnew tree is subsequently rearranged and repainted to\nrestore the coloring properties. The properties are\ndesigned in such a way that this rearranging and recoloring\ncan be performed efficiently.")]),e._m(1),r("p",[e._v("An example of a red–black tree:")]),e._m(2),e._m(3),r("p",[e._v("In addition to the requirements imposed on a binary search\ntree the following must be satisfied by a red–black tree:")]),e._m(4),e._m(5),e._m(6),e._m(7),e._m(8),e._m(9),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),e._m(20),r("ul",[r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wikipedia"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=UaLIHuR1t8Q&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&index=63",target:"_blank",rel:"noopener noreferrer"}},[e._v("Red Black Tree Insertion by Tushar Roy (YouTube)"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=CTvfzU_uNKE&t=0s&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&index=64",target:"_blank",rel:"noopener noreferrer"}},[e._v("Red Black Tree Deletion by Tushar Roy (YouTube)"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://www.geeksforgeeks.org/red-black-tree-set-2-insert/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Red Black Tree Insertion on GeeksForGeeks"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Red Black Tree Interactive Visualisations"),r("OutboundLink")],1)])])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"red–black-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#red–black-tree","aria-hidden":"true"}},[this._v("#")]),this._v(" Red–Black Tree")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The balancing of the tree is not perfect, but it is good\nenough to allow it to guarantee searching in "),t("code",[this._v("O(log n)")]),this._v(" time,\nwhere "),t("code",[this._v("n")]),this._v(" is the total number of elements in the tree.\nThe insertion and deletion operations, along with the tree\nrearrangement and recoloring, are also performed\nin "),t("code",[this._v("O(log n)")]),this._v(" time.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_example.svg",alt:"red-black tree"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[this._v("#")]),this._v(" Properties")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("Each node is either red or black.")]),t("li",[this._v("The root is black. This rule is sometimes omitted.\nSince the root can always be changed from red to black,\nbut not necessarily vice versa, this rule has little\neffect on analysis.")]),t("li",[this._v("All leaves (NIL) are black.")]),t("li",[this._v("If a node is red, then both its children are black.")]),t("li",[this._v("Every path from a given node to any of its descendant\nNIL nodes contains the same number of black nodes.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Some definitions: the number of black nodes from the root\nto a node is the node's "),t("strong",[this._v("black depth")]),this._v("; the uniform\nnumber of black nodes in all paths from root to the leaves\nis called the "),t("strong",[this._v("black-height")]),this._v(" of the red–black tree.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("These constraints enforce a critical property of red–black\ntrees: "),t("em",[this._v("the path from the root to the farthest leaf is no more than twice as long as the path from the root to the nearest leaf")]),this._v(".\nThe result is that the tree is roughly height-balanced.\nSince operations such as inserting, deleting, and finding\nvalues require worst-case time proportional to the height\nof the tree, this theoretical upper bound on the height\nallows red–black trees to be efficient in the worst case,\nunlike ordinary binary search trees.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"balancing-during-insertion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#balancing-during-insertion","aria-hidden":"true"}},[this._v("#")]),this._v(" Balancing during insertion")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"if-uncle-is-red"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-uncle-is-red","aria-hidden":"true"}},[this._v("#")]),this._v(" If uncle is RED")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase2.png",alt:"Red Black Tree Balancing"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"if-uncle-is-black"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-uncle-is-black","aria-hidden":"true"}},[this._v("#")]),this._v(" If uncle is BLACK")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("Left Left Case ("),r("code",[e._v("p")]),e._v(" is left child of "),r("code",[e._v("g")]),e._v(" and "),r("code",[e._v("x")]),e._v(" is left child of "),r("code",[e._v("p")]),e._v(")")]),r("li",[e._v("Left Right Case ("),r("code",[e._v("p")]),e._v(" is left child of "),r("code",[e._v("g")]),e._v(" and "),r("code",[e._v("x")]),e._v(" is right child of "),r("code",[e._v("p")]),e._v(")")]),r("li",[e._v("Right Right Case ("),r("code",[e._v("p")]),e._v(" is right child of "),r("code",[e._v("g")]),e._v(" and "),r("code",[e._v("x")]),e._v(" is right child of "),r("code",[e._v("p")]),e._v(")")]),r("li",[e._v("Right Left Case ("),r("code",[e._v("p")]),e._v(" is right child of "),r("code",[e._v("g")]),e._v(" and "),r("code",[e._v("x")]),e._v(" is left child of "),r("code",[e._v("p")]),e._v(")")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"left-left-case-see-g-p-and-x"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#left-left-case-see-g-p-and-x","aria-hidden":"true"}},[this._v("#")]),this._v(" Left Left Case (See g, p and x)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3a1.png",alt:"Red Black Tree Balancing"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"left-right-case-see-g-p-and-x"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#left-right-case-see-g-p-and-x","aria-hidden":"true"}},[this._v("#")]),this._v(" Left Right Case (See g, p and x)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3d.png",alt:"Red Black Tree Balancing"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"right-right-case-see-g-p-and-x"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#right-right-case-see-g-p-and-x","aria-hidden":"true"}},[this._v("#")]),this._v(" Right Right Case (See g, p and x)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3c.png",alt:"Red Black Tree Balancing"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"right-left-case-see-g-p-and-x"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#right-left-case-see-g-p-and-x","aria-hidden":"true"}},[this._v("#")]),this._v(" Right Left Case (See g, p and x)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://www.geeksforgeeks.org/wp-content/uploads/redBlackCase3c.png",alt:"Red Black Tree Balancing"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[this._v("#")]),this._v(" References")])}],!1,null,null,null);t.default=n.exports}}]);