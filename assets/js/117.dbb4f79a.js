(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{161:function(t,e,r){"use strict";r.r(e);var a=r(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),r("p",[r("a",{attrs:{href:"https://travis-ci.org/trekhleb/javascript-algorithms",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://travis-ci.org/trekhleb/javascript-algorithms.svg?branch=master",alt:"Build Status"}}),r("OutboundLink")],1),r("a",{attrs:{href:"https://codecov.io/gh/trekhleb/javascript-algorithms",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg",alt:"codecov"}}),r("OutboundLink")],1)]),r("p",[t._v("This repository contains JavaScript based examples of many\npopular algorithms and data structures.")]),r("p",[t._v("Each algorithm and data structure have its own separate README\nwith related explanations and links for further reading and YouTube\nvideos.")]),r("p",[r("em",[t._v("Read this in other languages:")]),r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("简体中文"),r("OutboundLink")],1),t._v(",\n"),r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-TW.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("繁體中文"),r("OutboundLink")],1)]),t._m(1),r("p",[t._v("Data structure is a particular way of organizing and storing data in a computer so that it can\nbe accessed and modified efficiently. More precisely, a data structure is a collection of data\nvalues, the relationships among them, and the functions or operations that can be applied to\nthe data.")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/linked-list",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linked List"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/queue",target:"_blank",rel:"noopener noreferrer"}},[t._v("Queue"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/stack",target:"_blank",rel:"noopener noreferrer"}},[t._v("Stack"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/hash-table",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hash Table"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/heap",target:"_blank",rel:"noopener noreferrer"}},[t._v("Heap"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/priority-queue",target:"_blank",rel:"noopener noreferrer"}},[t._v("Priority Queue"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/trie",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trie"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tree"),r("OutboundLink")],1),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/tree/binary-search-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("Binary Search Tree"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/tree/avl-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("AVL Tree"),r("OutboundLink")],1)]),r("li",[t._v("Red-Black Tree")]),r("li",[t._v("Suffix Tree")]),r("li",[t._v("Segment Tree or Interval Tree")]),r("li",[t._v("Binary Indexed Tree or Fenwick Tree")])])]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/graph",target:"_blank",rel:"noopener noreferrer"}},[t._v("Graph"),r("OutboundLink")],1),t._v(" (both directed and undirected)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/disjoint-set",target:"_blank",rel:"noopener noreferrer"}},[t._v("Disjoint Set"),r("OutboundLink")],1)])]),t._m(2),r("p",[t._v("Algorithm is an unambiguous specification of how to solve a class of problems. Algorithm is\na set of rules that precisely defines a sequence of operations.")]),t._m(3),r("ul",[r("li",[r("strong",[t._v("Math")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/factorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("Factorial"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/fibonacci",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fibonacci Number"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/primality-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("Primality Test"),r("OutboundLink")],1),t._v(" (trial division method)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/euclidean-algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Euclidean Algorithm"),r("OutboundLink")],1),t._v(" - calculate the Greatest Common Divisor (GCD)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/least-common-multiple",target:"_blank",rel:"noopener noreferrer"}},[t._v("Least Common Multiple"),r("OutboundLink")],1),t._v(" (LCM)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/integer-partition",target:"_blank",rel:"noopener noreferrer"}},[t._v("Integer Partition"),r("OutboundLink")],1)])])]),r("li",[r("strong",[t._v("Sets")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/cartesian-product",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cartesian Product"),r("OutboundLink")],1),t._v(" - product of multiple sets")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/power-set",target:"_blank",rel:"noopener noreferrer"}},[t._v("Power Set"),r("OutboundLink")],1),t._v(" - all subsets of the set")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/permutations",target:"_blank",rel:"noopener noreferrer"}},[t._v("Permutations"),r("OutboundLink")],1),t._v(" (with and without repetitions)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/combinations",target:"_blank",rel:"noopener noreferrer"}},[t._v("Combinations"),r("OutboundLink")],1),t._v(" (with and without repetitions)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/fisher-yates",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fisher–Yates Shuffle"),r("OutboundLink")],1),t._v(" - random permutation of a finite sequence")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/longest-common-subsequnce",target:"_blank",rel:"noopener noreferrer"}},[t._v("Longest Common Subsequence"),r("OutboundLink")],1),t._v(" (LCS)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("Longest Increasing subsequence"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/shortest-common-supersequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shortest Common Supersequence"),r("OutboundLink")],1),t._v(" (SCS)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/knapsack-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("Knapsack Problem"),r("OutboundLink")],1),t._v(' - "0/1" and "Unbound" ones')]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/maximum-subarray",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maximum Subarray"),r("OutboundLink")],1),t._v(' - "Brute Force" and "Dynamic Programming" (Kadane\'s) versions')])])]),r("li",[r("strong",[t._v("String")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/levenshtein-distance",target:"_blank",rel:"noopener noreferrer"}},[t._v("Levenshtein Distance"),r("OutboundLink")],1),t._v(" - minimum edit distance between two sequences")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/hamming-distance",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hamming Distance"),r("OutboundLink")],1),t._v(" - number of positions at which the symbols are different")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/knuth-morris-pratt",target:"_blank",rel:"noopener noreferrer"}},[t._v("Knuth–Morris–Pratt Algorithm"),r("OutboundLink")],1),t._v(" - substring search")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/rabin-karp",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rabin Karp Algorithm"),r("OutboundLink")],1),t._v(" - substring search")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/longest-common-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("Longest Common Substring"),r("OutboundLink")],1)])])]),r("li",[r("strong",[t._v("Search")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/search/linear-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linear Search"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/search/binary-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Binary Search"),r("OutboundLink")],1)])])]),r("li",[r("strong",[t._v("Sorting")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/bubble-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bubble Sort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/selection-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Selection Sort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/insertion-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Insertion Sort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/heap-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Heap Sort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/merge-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Merge Sort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/quick-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Quicksort"),r("OutboundLink")],1),t._v(" - in-place and non-in-place implementations")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/shell-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shellsort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/counting-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Counting Sort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/radix-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Radix Sort"),r("OutboundLink")],1)])])]),r("li",[r("strong",[t._v("Tree")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/tree/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Depth-First Search"),r("OutboundLink")],1),t._v(" (DFS)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/tree/breadth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Breadth-First Search"),r("OutboundLink")],1),t._v(" (BFS)")])])]),r("li",[r("strong",[t._v("Graph")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Depth-First Search"),r("OutboundLink")],1),t._v(" (DFS)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/breadth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Breadth-First Search"),r("OutboundLink")],1),t._v(" (BFS)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/dijkstra",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dijkstra Algorithm"),r("OutboundLink")],1),t._v(" - finding shortest path to all graph vertices")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/bellman-ford",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bellman-Ford Algorithm"),r("OutboundLink")],1),t._v(" - finding shortest path to all graph vertices")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/detect-cycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("Detect Cycle"),r("OutboundLink")],1),t._v(" - for both directed and undirected graphs (DFS and Disjoint Set based versions)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/prim",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prim’s Algorithm"),r("OutboundLink")],1),t._v(" - finding Minimum Spanning Tree (MST) for weighted undirected graph")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/kruskal",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kruskal’s Algorithm"),r("OutboundLink")],1),t._v(" - finding Minimum Spanning Tree (MST) for weighted undirected graph")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/topological-sorting",target:"_blank",rel:"noopener noreferrer"}},[t._v("Topological Sorting"),r("OutboundLink")],1),t._v(" - DFS method")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/articulation-points",target:"_blank",rel:"noopener noreferrer"}},[t._v("Articulation Points"),r("OutboundLink")],1),t._v(" - Tarjan's algorithm (DFS based)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/bridges",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bridges"),r("OutboundLink")],1),t._v(" - DFS based algorithm")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/eulerian-path",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eulerian Path and Eulerian Circuit"),r("OutboundLink")],1),t._v(" - Fleury's algorithm - Visit every edge exactly once")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/hamiltonian-cycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hamiltonian Cycle"),r("OutboundLink")],1),t._v(" - Visit every vertex exactly once")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/strongly-connected-components",target:"_blank",rel:"noopener noreferrer"}},[t._v("Strongly Connected Components"),r("OutboundLink")],1),t._v(" - Kosaraju's algorithm")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/travelling-salesman",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travelling Salesman Problem"),r("OutboundLink")],1),t._v(" - shortest possible route that visits each city and returns to the origin city")])])]),r("li",[r("strong",[t._v("Uncategorized")]),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/uncategorized/hanoi-tower",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tower of Hanoi"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/uncategorized/n-queens",target:"_blank",rel:"noopener noreferrer"}},[t._v("N-Queens Problem"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/uncategorized/knight-tour",target:"_blank",rel:"noopener noreferrer"}},[t._v("Knight's Tour"),r("OutboundLink")],1)])])])]),t._m(4),r("p",[t._v("An algorithmic paradigm is a generic method or approach which underlies the design of a class\nof algorithms. It is an abstraction higher than the notion of an algorithm, just as an\nalgorithm is an abstraction higher than a computer program.")]),r("ul",[r("li",[r("strong",[t._v("Brute Force")]),t._v(" - look at all the possibilities and selects the best solution\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/maximum-subarray",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maximum Subarray"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/travelling-salesman",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travelling Salesman Problem"),r("OutboundLink")],1),t._v(" - shortest possible route that visits each city and returns to the origin city")])])]),r("li",[r("strong",[t._v("Greedy")]),t._v(" - choose the best option at the current time, without any consideration for the future\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/knapsack-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unbound Knapsack Problem"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/dijkstra",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dijkstra Algorithm"),r("OutboundLink")],1),t._v(" - finding shortest path to all graph vertices")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/prim",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prim’s Algorithm"),r("OutboundLink")],1),t._v(" - finding Minimum Spanning Tree (MST) for weighted undirected graph")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/kruskal",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kruskal’s Algorithm"),r("OutboundLink")],1),t._v(" - finding Minimum Spanning Tree (MST) for weighted undirected graph")])])]),r("li",[r("strong",[t._v("Divide and Conquer")]),t._v(" - divide the problem into smaller parts and then solve those parts\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/search/binary-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Binary Search"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/uncategorized/hanoi-tower",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tower of Hanoi"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/euclidean-algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Euclidean Algorithm"),r("OutboundLink")],1),t._v(" - calculate the Greatest Common Divisor (GCD)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/permutations",target:"_blank",rel:"noopener noreferrer"}},[t._v("Permutations"),r("OutboundLink")],1),t._v(" (with and without repetitions)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/combinations",target:"_blank",rel:"noopener noreferrer"}},[t._v("Combinations"),r("OutboundLink")],1),t._v(" (with and without repetitions)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/merge-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Merge Sort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sorting/quick-sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Quicksort"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/tree/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tree Depth-First Search"),r("OutboundLink")],1),t._v(" (DFS)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/depth-first-search",target:"_blank",rel:"noopener noreferrer"}},[t._v("Graph Depth-First Search"),r("OutboundLink")],1),t._v(" (DFS)")])])]),r("li",[r("strong",[t._v("Dynamic Programming")]),t._v(" - build up to a solution using previously found sub-solutions\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/fibonacci",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fibonacci Number"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/levenshtein-distance",target:"_blank",rel:"noopener noreferrer"}},[t._v("Levenshtein Distance"),r("OutboundLink")],1),t._v(" - minimum edit distance between two sequences")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/longest-common-subsequnce",target:"_blank",rel:"noopener noreferrer"}},[t._v("Longest Common Subsequence"),r("OutboundLink")],1),t._v(" (LCS)")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/longest-common-substring",target:"_blank",rel:"noopener noreferrer"}},[t._v("Longest Common Substring"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("Longest Increasing subsequence"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/shortest-common-supersequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shortest Common Supersequence"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/knapsack-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("0/1 Knapsack Problem"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/integer-partition",target:"_blank",rel:"noopener noreferrer"}},[t._v("Integer Partition"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/sets/maximum-subarray",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maximum Subarray"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/bellman-ford",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bellman-Ford Algorithm"),r("OutboundLink")],1),t._v(" - finding shortest path to all graph vertices")])])]),r("li",[r("strong",[t._v("Backtracking")]),t._v(" - similarly to brute force try to generate all possible solutions but each time you generate a solution test\nif it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise backtrack and go on a\ndifferent path of finding solution\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/hamiltonian-cycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hamiltonian Cycle"),r("OutboundLink")],1),t._v(" - Visit every vertex exactly once")]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/uncategorized/n-queens",target:"_blank",rel:"noopener noreferrer"}},[t._v("N-Queens Problem"),r("OutboundLink")],1)]),r("li",[r("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/uncategorized/knight-tour",target:"_blank",rel:"noopener noreferrer"}},[t._v("Knight's Tour"),r("OutboundLink")],1)])])]),t._m(5)]),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),r("p",[t._v("Then just simply run the following command to test if your playground code works as expected:")]),t._m(15),t._m(16),t._m(17),r("p",[r("a",{attrs:{href:"https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"}},[t._v("▶ Data Structures and Algorithms on YouTube"),r("OutboundLink")],1)]),t._m(18),r("p",[t._v("Order of growth of algorithms specified in Big O notation.")]),t._m(19),r("p",[t._v("Source: "),r("a",{attrs:{href:"http://bigocheatsheet.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Big O Cheat Sheet"),r("OutboundLink")],1),t._v(".")]),r("p",[t._v("Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.")]),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"javascript-algorithms-and-data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-algorithms-and-data-structures","aria-hidden":"true"}},[this._v("#")]),this._v(" JavaScript Algorithms and Data Structures")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-structures","aria-hidden":"true"}},[this._v("#")]),this._v(" Data Structures")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"algorithms"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#algorithms","aria-hidden":"true"}},[this._v("#")]),this._v(" Algorithms")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"algorithms-by-topic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#algorithms-by-topic","aria-hidden":"true"}},[this._v("#")]),this._v(" Algorithms by Topic")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"algorithms-by-paradigm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#algorithms-by-paradigm","aria-hidden":"true"}},[this._v("#")]),this._v(" Algorithms by Paradigm")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("strong",[this._v("Branch & Bound")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"how-to-use-this-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use-this-repository","aria-hidden":"true"}},[this._v("#")]),this._v(" How to use this repository")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Install all dependencies")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm install\n")])]),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Run all tests")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm test\n")])]),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Run tests by name")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm test -- -t 'LinkedList'\n")])]),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Playground")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("You may play with data-structures and algorithms in "),e("code",[this._v("./src/playground/playground.js")]),this._v(" file and write\ntests for it in "),e("code",[this._v("./src/playground/__test__/playground.test.js")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm test -- -t 'playground'\n")])]),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"useful-information"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useful-information","aria-hidden":"true"}},[this._v("#")]),this._v(" Useful Information")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[this._v("#")]),this._v(" References")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"big-o-notation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#big-o-notation","aria-hidden":"true"}},[this._v("#")]),this._v(" Big O Notation")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://github.com/trekhleb/javascript-algorithms/blob/master/assets/big-o-graph.png?raw=true",alt:"Big O graphs"}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",[t._v("Big O Notation")]),r("th",[t._v("Computations for 10 elements")]),r("th",[t._v("Computations for 100 elements")]),r("th",[t._v("Computations for 1000 elements")])])]),r("tbody",[r("tr",[r("td",[r("strong",[t._v("O(1)")])]),r("td",[t._v("1")]),r("td",[t._v("1")]),r("td",[t._v("1")])]),r("tr",[r("td",[r("strong",[t._v("O(log N)")])]),r("td",[t._v("3")]),r("td",[t._v("6")]),r("td",[t._v("9")])]),r("tr",[r("td",[r("strong",[t._v("O(N)")])]),r("td",[t._v("10")]),r("td",[t._v("100")]),r("td",[t._v("1000")])]),r("tr",[r("td",[r("strong",[t._v("O(N log N)")])]),r("td",[t._v("30")]),r("td",[t._v("600")]),r("td",[t._v("9000")])]),r("tr",[r("td",[r("strong",[t._v("O(N^2)")])]),r("td",[t._v("100")]),r("td",[t._v("10000")]),r("td",[t._v("1000000")])]),r("tr",[r("td",[r("strong",[t._v("O(2^N)")])]),r("td",[t._v("1024")]),r("td",[t._v("1.26e+29")]),r("td",[t._v("1.07e+301")])]),r("tr",[r("td",[r("strong",[t._v("O(N!)")])]),r("td",[t._v("3628800")]),r("td",[t._v("9.3e+157")]),r("td",[t._v("4.02e+2567")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"data-structure-operations-complexity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-structure-operations-complexity","aria-hidden":"true"}},[this._v("#")]),this._v(" Data Structure Operations Complexity")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",[t._v("Data Structure")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Access")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Search")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Insertion")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Deletion")]),r("th",{staticStyle:{"text-align":"left"}},[t._v("Comments")])])]),r("tbody",[r("tr",[r("td",[r("strong",[t._v("Array")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Stack")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Queue")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Linked List")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Hash Table")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"left"}},[t._v("In case of perfect hash function costs would be O(1)")])]),r("tr",[r("td",[r("strong",[t._v("Binary Search Tree")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"left"}},[t._v("In case of balanced tree costs would be O(log(n))")])]),r("tr",[r("td",[r("strong",[t._v("B-Tree")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Red-Black Tree")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("AVL Tree")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"left"}})])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"array-sorting-algorithms-complexity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array-sorting-algorithms-complexity","aria-hidden":"true"}},[this._v("#")]),this._v(" Array Sorting Algorithms Complexity")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",[t._v("Name")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Best")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Average")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Worst")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Memory")]),r("th",{staticStyle:{"text-align":"center"}},[t._v("Stable")]),r("th",{staticStyle:{"text-align":"left"}},[t._v("Comments")])])]),r("tbody",[r("tr",[r("td",[r("strong",[t._v("Bubble sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Insertion sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Selection sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Heap sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Merge sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Quick sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Shell sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n log(n)")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("depends on gap sequence")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n (log(n))^2")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),r("td",{staticStyle:{"text-align":"left"}})]),r("tr",[r("td",[r("strong",[t._v("Counting sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n + r")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),r("td",{staticStyle:{"text-align":"left"}},[t._v("r - biggest number in array")])]),r("tr",[r("td",[r("strong",[t._v("Radix sort")])]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("n + k")]),r("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),r("td",{staticStyle:{"text-align":"left"}},[t._v("k - length of longest key")])])])])}],!1,null,null,null);e.default=s.exports}}]);