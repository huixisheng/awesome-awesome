(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{341:function(t,e,i){"use strict";i.r(e);var n=i(0),r=Object(n.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),i("ul",[i("li",[i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Radix_sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia"),i("OutboundLink")],1)]),i("li",[i("a",{attrs:{href:"https://www.youtube.com/watch?v=XiuSW_mEn7g&index=62&t=0s&list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube"),i("OutboundLink")],1)]),i("li",[i("a",{attrs:{href:"https://www.researchgate.net/figure/Simplistic-illustration-of-the-steps-performed-in-a-radix-sort-In-this-example-the_fig1_291086231",target:"_blank",rel:"noopener noreferrer"}},[t._v("ResearchGate"),i("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"radix-sort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#radix-sort","aria-hidden":"true"}},[this._v("#")]),this._v(" Radix Sort")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("In computer science, "),e("strong",[this._v("radix sort")]),this._v(" is a non-comparative integer sorting\nalgorithm that sorts data with integer keys by grouping keys by the individual\ndigits which share the same significant position and value. A positional notation\nis required, but because integers can represent strings of characters\n(e.g., names or dates) and specially formatted floating point numbers, radix\nsort is not limited to integers.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"efficiency"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#efficiency","aria-hidden":"true"}},[this._v("#")]),this._v(" Efficiency")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("p",[t._v("The topic of the efficiency of radix sort compared to other sorting algorithms is\nsomewhat tricky and subject to quite a lot of misunderstandings. Whether radix\nsort is equally efficient, less efficient or more efficient than the best\ncomparison-based algorithms depends on the details of the assumptions made.\nRadix sort complexity is "),i("code",[t._v("O(wn)")]),t._v(" for "),i("code",[t._v("n")]),t._v(" keys which are integers of word size "),i("code",[t._v("w")]),t._v(".\nSometimes "),i("code",[t._v("w")]),t._v(" is presented as a constant, which would make radix sort better\n(for sufficiently large "),i("code",[t._v("n")]),t._v(") than the best comparison-based sorting algorithms,\nwhich all perform "),i("code",[t._v("O(n log n)")]),t._v(" comparisons to sort "),i("code",[t._v("n")]),t._v(" keys. However, in\ngeneral "),i("code",[t._v("w")]),t._v(" cannot be considered a constant: if all "),i("code",[t._v("n")]),t._v(" keys are distinct,\nthen "),i("code",[t._v("w")]),t._v(" has to be at least "),i("code",[t._v("log n")]),t._v(" for a random-access machine to be able to\nstore them in memory, which gives at best a time complexity "),i("code",[t._v("O(n log n)")]),t._v(". That\nwould seem to make radix sort at most equally efficient as the best\ncomparison-based sorts (and worse if keys are much longer than "),i("code",[t._v("log n")]),t._v(").")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://www.researchgate.net/publication/291086231/figure/fig1/AS:614214452404240@1523451545568/Simplistic-illustration-of-the-steps-performed-in-a-radix-sort-In-this-example-the.png",alt:"Radix Sort"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"complexity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#complexity","aria-hidden":"true"}},[this._v("#")]),this._v(" Complexity")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("table",[i("thead",[i("tr",[i("th",[t._v("Name")]),i("th",{staticStyle:{"text-align":"center"}},[t._v("Best")]),i("th",{staticStyle:{"text-align":"center"}},[t._v("Average")]),i("th",{staticStyle:{"text-align":"center"}},[t._v("Worst")]),i("th",{staticStyle:{"text-align":"center"}},[t._v("Memory")]),i("th",{staticStyle:{"text-align":"center"}},[t._v("Stable")]),i("th",{staticStyle:{"text-align":"left"}},[t._v("Comments")])])]),i("tbody",[i("tr",[i("td",[i("strong",[t._v("Radix sort")])]),i("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),i("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),i("td",{staticStyle:{"text-align":"center"}},[t._v("n * k")]),i("td",{staticStyle:{"text-align":"center"}},[t._v("n + k")]),i("td",{staticStyle:{"text-align":"center"}},[t._v("Yes")]),i("td",{staticStyle:{"text-align":"left"}},[t._v("k - length of longest key")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[this._v("#")]),this._v(" References")])}],!1,null,null,null);e.default=r.exports}}]);